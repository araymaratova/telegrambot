import random
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram import types
from keyboards import imitation_menu, main_menu
from aiogram import Dispatcher

router = Router()

# –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
negotiation_scenarios = [
    "üíº –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Å–∫–∏–¥–∫—É 5%, –Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ 10%. –ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç–µ?",
    "üìÖ –ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞ 3 –¥–Ω—è, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ 7. –ö–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç–µ?",
    "üí∞ –í—ã –≤–µ–¥–µ—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ. –ö–∞–∫ —É–±–µ–¥–∏—Ç–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–æ–≤—ã—Å–∏—Ç—å –µ—ë?",
    "üìâ –ü–∞—Ä—Ç–Ω–µ—Ä —Ö–æ—á–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞. –ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?",
    "üì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É. –ö–∞–∫ —É–±–µ–¥–∏—Ç–µ –µ–≥–æ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?",
    "üìä –í–∞—à —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ö–∞–∫ —É–±–µ–¥–∏—Ç–µ –µ–≥–æ?",
    "üîÑ –ö–æ–ª–ª–µ–≥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã. –ö–∞–∫ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã?",
    "üìç –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –Ω–æ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞. –ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç–µ?",
    "üìà –í—ã –ø—Ä–æ–¥–∞–µ—Ç–µ —É—Å–ª—É–≥—É, –Ω–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ –µ—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ö–∞–∫ —É–±–µ–∂–¥–∞–µ—Ç–µ?",
    "üìú –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –Ω–æ –∫–ª–∏–µ–Ω—Ç –≤—ã–¥–≤–∏–≥–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ?"
]

@router.callback_query(lambda c: c.data == "imitation")
async def imitation_negotiations(callback_query: CallbackQuery):
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    random_scenario = random.choice(negotiation_scenarios)
    await callback_query.message.answer(
        f"–°–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:\n\n{random_scenario}",
        reply_markup=imitation_menu  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    )
    await callback_query.answer()

# –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
keywords = {
    "—Å–∫–∏–¥–∫–∞": ["—Å–∫–∏–¥–∫–∞", "–∫–æ–º–ø—Ä–æ–º–∏—Å—Å", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"],
    "—Å—Ä–æ–∫": ["—Å—Ä–æ–∫", "–ø–µ—Ä–µ–Ω–æ—Å", "–≥–∏–±–∫–æ—Å—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"],
    "–∑–∞—Ä–ø–ª–∞—Ç–∞": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "–æ–ø—ã—Ç", "–∞—Ä–≥—É–º–µ–Ω—Ç—ã"],
    "–±—é–¥–∂–µ—Ç": ["–±—é–¥–∂–µ—Ç", "—Ä–∞—Å—Ö–æ–¥—ã", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"],
    "–¥–æ—Å—Ç–∞–≤–∫–∞": ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–∑–∞–¥–µ—Ä–∂–∫–∞", "—É—Å–∫–æ—Ä–∏—Ç—å", "—Ä–µ—à–µ–Ω–∏–µ"],
    "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è": ["—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "–∞–Ω–∞–ª–∏–∑", "–ø–ª–∞–Ω", "–¥–∞–Ω–Ω—ã–µ"],
    "—Ä–∞–±–æ—Ç–∞": ["–∫–æ–º–∞–Ω–¥–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"],
    "—ç–∫—Å–∫–ª—é–∑–∏–≤": ["—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "–≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–∞", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"],
    "—É—Å–ª—É–≥–∞": ["–ø–æ–ª—å–∑–∞", "–∫–∞—á–µ—Å—Ç–≤–æ", "–æ—Ç–∑—ã–≤—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"],
    "–∫–æ–Ω—Ç—Ä–∞–∫—Ç": ["–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ", "—É—Å—Ç—É–ø–∫–∏", "—É—Å–ª–æ–≤–∏—è", "–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã"]
}

# –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def evaluate_response(user_response):
    score = 0
    user_text = user_response.lower()

    for topic, words in keywords.items():
        if any(word in user_text for word in words):
            score += 1

    if score >= 3:
        return random.choice(["üî• –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç! –í—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –≤–µ–¥–µ—Ç–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã!", "‚úÖ –°—É–ø–µ—Ä! –í–∞—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–∏–ª—å–Ω—ã–µ –∏ –ª–æ–≥–∏—á–Ω—ã–µ!"])
    elif score == 2:
        return random.choice(["üëç –ù–µ–ø–ª–æ—Ö–æ! –í–∞—à –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ–≤.", "üßê –•–æ—Ä–æ—à–∏–π —Ö–æ–¥, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å–∏–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é."])
    elif score == 1:
        return random.choice(["ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è, –Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.", "üìå –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ–Ω—è—Ç–Ω–∞, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–ª—å–Ω–µ–µ —É–±–µ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."])
    else:
        return random.choice(["‚ùå –≠—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Å–ª–∞–±—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥.", "üö® –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π! –ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â—ë."])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@router.message(lambda message: message.reply_to_message and "–°–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤" in message.reply_to_message.text)
async def evaluate_message(message: types.Message):
    # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    evaluation = evaluate_response(message.text)
    await message.answer(evaluation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìù –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é"
@router.callback_query(lambda c: c.data == "answer_scenario")
async def handle_answer_scenario(callback_query: CallbackQuery):
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é:")
    await callback_query.answer()
    
@router.callback_query(lambda c: c.data == "imitation")
async def imitation_negotiations(callback_query: CallbackQuery):
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    random_scenario = random.choice(negotiation_scenarios)
    await callback_query.message.answer(
        f"–°–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:\n\n{random_scenario}",
        reply_markup=imitation_menu  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    )
    await callback_query.answer()
